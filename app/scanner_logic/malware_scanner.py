import requests
import time
from datetime import datetime

# ================= Configuration =================

VT_API_KEY = '****************************************************************'
HA_API_KEY = '****************************************************************'

try:
    from app.routes import log
except:
    def log(msg):
        print(msg)

# =============== VirusTotal Scan =================
def scan_file(file_path):
    url = 'https://www.virustotal.com/api/v3/files'
    headers = {'x-apikey': VT_API_KEY}

    with open(file_path, 'rb') as f:
        files = {'file': (file_path, f)}
        log("[VT] Uploading file to VirusTotal...")
        response = requests.post(url, headers=headers, files=files)

    if response.status_code == 200:
        analysis_id = response.json()['data']['id']
        log(f"[VT] File uploaded. Analysis ID: {analysis_id}")
        return analysis_id
    else:
        log(f"[VT] Error uploading file: {response.status_code} - {response.text}")
        return None

def get_report(analysis_id, file_path, return_stats=True):
    url = f'https://www.virustotal.com/api/v3/analyses/{analysis_id}'
    headers = {'x-apikey': VT_API_KEY}

    log("[VT] Waiting for scan to complete...")
    while True:
        response = requests.get(url, headers=headers)
        result = response.json()
        status = result['data']['attributes']['status']

        if status == 'completed':
            stats = result['data']['attributes']['stats']
            log(f"\n[VT] Scan Completed:")
            log(f"  - Malicious: {stats['malicious']}")
            log(f"  - Suspicious: {stats['suspicious']}")
            log(f"  - Undetected: {stats['undetected']}")
            log(f"  - Harmless: {stats['harmless']}")
            save_scan_history(file_path, analysis_id, stats)
            if return_stats:
                return stats
            break
        else:
            log("[VT] Scan in progress...")
            time.sleep(5)

# ============== Hybrid Analysis Scan ==============
def scan_with_hybrid_analysis(file_path):
    url = "https://www.hybrid-analysis.com/api/v2/submit/file"
    headers = {
        "api-key": HA_API_KEY,
        "User-Agent":"MadDox",
    }
    data = {
        "environment_id": 160
    }

    log("[HA] Uploading file to Hybrid Analysis...")
    with open(file_path, "rb") as f:
        files = {'file': (file_path, f)}
        response = requests.post(url, headers=headers, data=data, files=files)

    if response.status_code == 200:
        result = response.json()
        job_id = result.get('job_id')
        log(f"[HA] File submitted to Hybrid Analysis. Job ID: {job_id}")
        return job_id
    else:
        log(f"[HA] Error submitting file. Code: {response.status_code}")
        log(response.text)
        return None

# ================ Save History ===================
def save_scan_history(file_path, analysis_id, stats):
    with open("scan_history.txt", "a") as f:
        f.write("\n==============================\n")
        f.write(f"Date/Time: {datetime.now()}\n")
        f.write(f"File: {file_path}\n")
        f.write(f"Analysis ID: {analysis_id}\n")
        f.write(f"Malicious: {stats['malicious']}\n")
        f.write(f"Suspicious: {stats['suspicious']}\n")
        f.write(f"Undetected: {stats['undetected']}\n")
        f.write(f"Harmless: {stats['harmless']}\n")